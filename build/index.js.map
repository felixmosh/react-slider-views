{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["import React, { useState, createContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport warning from \"warning\";\r\nimport { constant, checkIndexBounds, computeIndex, getDisplaySameSlide } from \"react-swipeable-views-core\";\r\n\r\n// External functions\r\nimport { addEventListeners, createTransition, adaptMouse, applyRotationMatrix, getDomTreeShapes, findNativeHandler } from \"./helpers/functions\";\r\n\r\n// Common properties\r\nimport { styles } from \"./properties/styles\";\r\nimport { axisProperties } from \"./properties/axisProperties\";\r\nimport { sliderProperties } from \"./properties/sliderProperties\";\r\n\r\n// We can only have one node at the time claiming ownership for handling the swipe.\r\n// Otherwise, the UX would be confusing.\r\n// That's why we use a singleton here.\r\nlet nodeWhoClaimedTheScroll = null;\r\n\r\nconst ReactSliderViews = () => {\r\n    // States\r\n    const [rootNode, setRootNode] = useState(null);\r\n    // const [containerNode, setContainerNode] = useState(null);\r\n    // const [ignoreNextScrollEvents, setIgnoreNextScrollEvents] = useState(false);\r\n    // const [viewLength, setViewLength] = useState(0);\r\n    // const [startX, setStartX] = useState(0);\r\n    // const [lastX, setLastX] = useState(0);\r\n    // const [vx, setVx] = useState(0);\r\n    // const [startY, setStartY] = useState(0);\r\n    // const [isSwiping, setIsSwiping] = useState(undefined);\r\n    // const [started, setStarted] = useState(false);\r\n    // const [startIndex, setStartIndex] = useState(0);\r\n    // const [transitionListener, setTransitionListener] = useState(false);\r\n    // const [touchMoveListener, setTouchMoveListener] = useState(null);\r\n    // const [activeSlide, setActiveSlide] = useState(null);\r\n    // const [indexCurrent, setIndexCurrent] = useState(null);\r\n    // const [firstRenderTimeout, setFirstRenderTimeout] = useState(null);\r\n\r\n    // Context\r\n    const SwipeableViewsContext = createContext();\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n        SwipeableViewsContext.displayName = \"SwipeableViewsContext\";\r\n    }\r\n\r\n    return <>Mi componente</>;\r\n};\r\n\r\nexport default ReactSliderViews;\r\n"],"names":["ReactSliderViews","useState","SwipeableViewsContext","createContext","process","env","NODE_ENV","displayName","React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC3B;EACgCC,IAAAA,SAAAA,GAAAA,cAAQ,CAAC,IAAD,CAAxC,CAAA;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA,CAAA;AAAA,MAAA,UAAA,CAAA,CAAA,CAAA,CAAA;oBAF2B;AAI3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;EACA,IAAMC,qBAAqB,gBAAGC,mBAAa,EAA3C,CAAA;;AACA,EAAA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACvCJ,qBAAqB,CAACK,WAAtB,GAAoC,uBAApC,CAAA;AACH,GAAA;;AAED,EAAA,oBAAOC,yBAAP,CAAA,aAAA,CAAAA,yBAAA,CAAA,QAAA,EAAA,IAAA,EAAA,eAAA,CAAA,CAAA;AACH;;;;"}